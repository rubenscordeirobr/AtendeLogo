// <auto-generated />
using System;
using System.Collections.Generic;
using AtendeLogo.Common.Enums;
using AtendeLogo.Persistence.Identity;
using AtendeLogo.Shared.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AtendeLogo.Persistence.Identity.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    partial class IdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("case_accent_insensitive")
                .HasAnnotation("Npgsql:CollationDefinition:case_accent_insensitive", "und-u-ks-level1,und-u-ks-level1,icu,False")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "admin_user_role", new[] { "manager", "operator", "super_admin", "viewer" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "authentication_type", new[] { "anonymous", "email_password", "facebook", "google", "microsoft", "sms", "system", "unknown", "whats_app" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "business_type", new[] { "civil_registry_office", "system" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "country", new[] { "argentina", "bolivia", "brazil", "canada", "chile", "colombia", "ecuador", "france", "germany", "guyana", "italy", "mexico", "paraguay", "peru", "portugal", "spain", "suriname", "united_kingdom", "united_states", "unknown", "uruguay", "venezuela" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "currency", new[] { "brl", "eur", "usd" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "language", new[] { "default", "english", "french", "german", "italian", "portuguese", "spanish" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "password_strength", new[] { "empty", "medium", "strong", "weak" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "tenant_state", new[] { "cancelled", "closed", "new", "onboarding", "operational", "system", "trial" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "tenant_status", new[] { "active", "archived", "inactive", "pending", "suspended" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "tenant_type", new[] { "company", "individual", "system" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "tenant_user_role", new[] { "admin", "chat_agent", "manager", "operator", "owner", "viewer" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_state", new[] { "active", "blocked", "deleted", "inactive", "new", "pending_verification", "suspended" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_status", new[] { "anonymous", "away", "busy", "do_not_disturb", "offline", "online", "system" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AtendeLogo.Domain.Entities.Identities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("Address_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<BusinessType>("BusinessType")
                        .HasColumnType("business_type")
                        .HasColumnName("business_type");

                    b.Property<Country>("Country")
                        .HasColumnType("country")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedSession_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("created_session_id");

                    b.Property<Currency>("Currency")
                        .HasColumnType("currency")
                        .HasColumnName("currency");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedSession_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_session_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email")
                        .UseCollation("case_accent_insensitive");

                    b.Property<string>("FiscalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("fiscal_code")
                        .UseCollation("case_accent_insensitive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<Language>("Language")
                        .HasColumnType("language")
                        .HasColumnName("language");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("LastUpdatedSession_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_session_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name")
                        .UseCollation("case_accent_insensitive");

                    b.Property<Guid?>("OwnerUser_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_user_id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<TenantState>("TenantState")
                        .HasColumnType("tenant_state")
                        .HasColumnName("tenant_state");

                    b.Property<TenantStatus>("TenantStatus")
                        .HasColumnType("tenant_status")
                        .HasColumnName("tenant_status");

                    b.Property<TenantType>("TenantType")
                        .HasColumnType("tenant_type")
                        .HasColumnName("tenant_type");

                    b.ComplexProperty<Dictionary<string, object>>("TimeZoneOffset", "AtendeLogo.Domain.Entities.Identities.Tenant.TimeZoneOffset#TimeZoneOffset", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Location")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("TimeZone_Location");

                            b1.Property<string>("Offset")
                                .IsRequired()
                                .HasMaxLength(6)
                                .HasColumnType("character varying(6)")
                                .HasColumnName("Offset");
                        });

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.HasIndex("Address_Id")
                        .IsUnique()
                        .HasDatabaseName("ix_tenants_address_id")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_tenants_email")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("FiscalCode")
                        .IsUnique()
                        .HasDatabaseName("ix_tenants_fiscal_code")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("OwnerUser_Id")
                        .IsUnique()
                        .HasDatabaseName("ix_tenants_owner_user_id")
                        .HasFilter("is_deleted = false");

                    b.ToTable("tenants", t =>
                        {
                            t.HasCheckConstraint("ck_tenants_created_session_id_not_empty", "created_session_id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_tenants_id_not_empty", "id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_tenants_last_updated_session_id_not_empty", "last_updated_session_id <> '00000000-0000-0000-0000-000000000000'::uuid");
                        });
                });

            modelBuilder.Entity("AtendeLogo.Domain.Entities.Identities.TenantAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address_name")
                        .UseCollation("case_accent_insensitive");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city")
                        .UseCollation("case_accent_insensitive");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("complement")
                        .UseCollation("case_accent_insensitive");

                    b.Property<Country>("Country")
                        .HasColumnType("country")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedSession_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("created_session_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedSession_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_session_id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("LastUpdatedSession_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_session_id");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("neighborhood")
                        .UseCollation("case_accent_insensitive");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("number")
                        .UseCollation("case_accent_insensitive");

                    b.Property<double?>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("sort_order")
                        .HasDefaultValueSql("get_next_sort_order_asc('addresses', 'sort_order')");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("state")
                        .UseCollation("case_accent_insensitive");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("street")
                        .UseCollation("case_accent_insensitive");

                    b.Property<Guid>("Tenant_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zip_code")
                        .UseCollation("case_accent_insensitive");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("ix_addresses_sort_order");

                    b.HasIndex("Tenant_Id")
                        .HasDatabaseName("ix_addresses_tenant_id");

                    b.ToTable("addresses", t =>
                        {
                            t.HasCheckConstraint("ck_addresses_created_session_id_not_empty", "created_session_id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_addresses_id_not_empty", "id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_addresses_last_updated_session_id_not_empty", "last_updated_session_id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_addresses_tenant_id_not_empty", "tenant_id <> '00000000-0000-0000-0000-000000000000'::uuid");
                        });
                });

            modelBuilder.Entity("AtendeLogo.Domain.Entities.Identities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedSession_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("created_session_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedSession_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_session_id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("discriminator")
                        .UseCollation("case_accent_insensitive");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email")
                        .UseCollation("case_accent_insensitive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("LastUpdatedSession_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_session_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name")
                        .UseCollation("case_accent_insensitive");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<double?>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("sort_order")
                        .HasDefaultValueSql("get_next_sort_order_asc('users', 'sort_order')");

                    b.Property<UserState>("UserState")
                        .HasColumnType("user_state")
                        .HasColumnName("user_state");

                    b.Property<UserStatus>("UserStatus")
                        .HasColumnType("user_status")
                        .HasColumnName("user_status");

                    b.ComplexProperty<Dictionary<string, object>>("Password", "AtendeLogo.Domain.Entities.Identities.User.Password#Password", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("HashValue")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)");

                            b1.Property<PasswordStrength>("Strength")
                                .HasColumnType("password_strength");
                        });

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("ix_users_sort_order");

                    b.ToTable("users", t =>
                        {
                            t.HasCheckConstraint("ck_users_created_session_id_not_empty", "created_session_id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_users_id_not_empty", "id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_users_last_updated_session_id_not_empty", "last_updated_session_id <> '00000000-0000-0000-0000-000000000000'::uuid");
                        });

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AtendeLogo.Domain.Entities.Identities.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("application_name")
                        .UseCollation("case_accent_insensitive");

                    b.Property<string>("AuthToken")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("auth_token")
                        .UseCollation("case_accent_insensitive");

                    b.Property<AuthenticationType>("AuthenticationType")
                        .HasColumnType("authentication_type")
                        .HasColumnName("authentication_type");

                    b.Property<string>("ClientSessionToken")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("client_session_token")
                        .UseCollation("case_accent_insensitive");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedSession_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("created_session_id");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("ip_address")
                        .UseCollation("case_accent_insensitive");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Language>("Language")
                        .HasColumnType("language")
                        .HasColumnName("language");

                    b.Property<DateTime>("LastActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_activity")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("LastUpdatedSession_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_session_id");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("Tenant_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime?>("TerminatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("terminated_at");

                    b.Property<int?>("TerminationReason")
                        .HasColumnType("integer")
                        .HasColumnName("termination_reason");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("user_agent")
                        .UseCollation("case_accent_insensitive");

                    b.Property<Guid>("User_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.ComplexProperty<Dictionary<string, object>>("GeoLocation", "AtendeLogo.Domain.Entities.Identities.UserSession.GeoLocation#GeoLocation", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double?>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("double precision");
                        });

                    b.HasKey("Id")
                        .HasName("pk_sessions");

                    b.HasIndex("AuthToken")
                        .HasDatabaseName("ix_sessions_auth_token");

                    b.HasIndex("ClientSessionToken")
                        .IsUnique()
                        .HasDatabaseName("ix_sessions_client_session_token");

                    b.HasIndex("Tenant_Id")
                        .HasDatabaseName("ix_sessions_tenant_id");

                    b.HasIndex("User_Id")
                        .HasDatabaseName("ix_sessions_user_id");

                    b.ToTable("sessions", t =>
                        {
                            t.HasCheckConstraint("ck_sessions_created_session_id_not_empty", "created_session_id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_sessions_id_not_empty", "id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_sessions_last_updated_session_id_not_empty", "last_updated_session_id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_sessions_user_id_not_empty", "user_id <> '00000000-0000-0000-0000-000000000000'::uuid");
                        });
                });

            modelBuilder.Entity("AtendeLogo.Domain.Entities.Identities.AdminUser", b =>
                {
                    b.HasBaseType("AtendeLogo.Domain.Entities.Identities.User");

                    b.Property<AdminUserRole>("AdminUserRole")
                        .HasColumnType("admin_user_role")
                        .HasColumnName("admin_user_role");

                    b.ToTable("users", t =>
                        {
                            t.HasCheckConstraint("ck_users_created_session_id_not_empty", "created_session_id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_users_id_not_empty", "id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_users_last_updated_session_id_not_empty", "last_updated_session_id <> '00000000-0000-0000-0000-000000000000'::uuid");
                        });

                    b.HasDiscriminator().HasValue("AdminUser");
                });

            modelBuilder.Entity("AtendeLogo.Domain.Entities.Identities.SystemUser", b =>
                {
                    b.HasBaseType("AtendeLogo.Domain.Entities.Identities.User");

                    b.ToTable("users", t =>
                        {
                            t.HasCheckConstraint("ck_users_created_session_id_not_empty", "created_session_id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_users_id_not_empty", "id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_users_last_updated_session_id_not_empty", "last_updated_session_id <> '00000000-0000-0000-0000-000000000000'::uuid");
                        });

                    b.HasDiscriminator().HasValue("SystemUser");
                });

            modelBuilder.Entity("AtendeLogo.Domain.Entities.Identities.TenantUser", b =>
                {
                    b.HasBaseType("AtendeLogo.Domain.Entities.Identities.User");

                    b.Property<TenantUserRole>("TenantUserRole")
                        .HasColumnType("tenant_user_role")
                        .HasColumnName("tenant_user_role");

                    b.Property<Guid>("Tenant_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasIndex("Tenant_Id")
                        .HasDatabaseName("ix_users_tenant_id");

                    b.ToTable("users", t =>
                        {
                            t.HasCheckConstraint("ck_users_created_session_id_not_empty", "created_session_id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_users_id_not_empty", "id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_users_last_updated_session_id_not_empty", "last_updated_session_id <> '00000000-0000-0000-0000-000000000000'::uuid");

                            t.HasCheckConstraint("ck_users_tenant_id_not_empty", "tenant_id <> '00000000-0000-0000-0000-000000000000'::uuid");
                        });

                    b.HasDiscriminator().HasValue("TenantUser");
                });

            modelBuilder.Entity("AtendeLogo.Domain.Entities.Identities.Tenant", b =>
                {
                    b.HasOne("AtendeLogo.Domain.Entities.Identities.TenantAddress", "DefaultAddress")
                        .WithOne()
                        .HasForeignKey("AtendeLogo.Domain.Entities.Identities.Tenant", "Address_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_tenants_addresses_address_id");

                    b.HasOne("AtendeLogo.Domain.Entities.Identities.TenantUser", "OwnerUser")
                        .WithOne()
                        .HasForeignKey("AtendeLogo.Domain.Entities.Identities.Tenant", "OwnerUser_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_tenants_users_owner_user_id");

                    b.Navigation("DefaultAddress");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("AtendeLogo.Domain.Entities.Identities.TenantAddress", b =>
                {
                    b.HasOne("AtendeLogo.Domain.Entities.Identities.Tenant", "Tenant")
                        .WithMany("Addresses")
                        .HasForeignKey("Tenant_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_addresses_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AtendeLogo.Domain.Entities.Identities.UserSession", b =>
                {
                    b.HasOne("AtendeLogo.Domain.Entities.Identities.Tenant", "Tenant")
                        .WithMany("Sessions")
                        .HasForeignKey("Tenant_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sessions_tenants_tenant_id");

                    b.HasOne("AtendeLogo.Domain.Entities.Identities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sessions_users_user_id");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AtendeLogo.Domain.Entities.Identities.TenantUser", b =>
                {
                    b.HasOne("AtendeLogo.Domain.Entities.Identities.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("Tenant_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AtendeLogo.Domain.Entities.Identities.Tenant", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Sessions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AtendeLogo.Domain.Entities.Identities.User", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
